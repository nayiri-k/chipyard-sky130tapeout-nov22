#!/usr/bin/env python3
#
# NOTE: the custom hooks are only used for sky130.

import os

import hammer_vlsi
from hammer_vlsi import CLIDriver, HammerToolHookAction

from typing import Dict, Callable, Optional, List

from technology.sky130 import SKY130Tech

def add_fillers(x: hammer_vlsi.HammerTool) -> bool:
    if x.get_setting("vlsi.core.technology") == "sky130" and \
       x.get_setting("vlsi.core.par_tool")   == "innovus" :
        x.add_fillers()  # call Innovus's add_fillers step
        # x.append("opt_design -post_route -setup -hold")
        # x.append("opt_design -post_route -hold")
    return True

def signoff_timing(x: hammer_vlsi.HammerTool) -> bool:
    if x.get_setting("vlsi.core.technology") == "sky130" and \
       x.get_setting("vlsi.core.par_tool")   == "innovus" :
                x.append('''
# setup timing
time_design -sign_off
# hold timing
time_design -sign_off -hold
''')
    return True

class ExampleDriver(CLIDriver):
    def get_extra_par_hooks(self) -> List[HammerToolHookAction]:
        extra_hooks = [
            # Default set of steps can be found in the CAD tool plugin's __init__.py

            # make_removal_hook will remove the specified step from the flow
            hammer_vlsi.HammerTool.make_removal_hook("place_bumps"),

            # move fillers step to after opt_design
            hammer_vlsi.HammerTool.make_removal_hook("add_fillers"),
            hammer_vlsi.HammerTool.make_post_insertion_hook("opt_design", add_fillers),
            # add final signoff timing
            hammer_vlsi.HammerTool.make_pre_insertion_hook("write_design", signoff_timing),

            # The target step in any of the above calls may be a default step or another one of your custom hooks
        ]
        return extra_hooks 

if __name__ == '__main__':
    ExampleDriver().main()
